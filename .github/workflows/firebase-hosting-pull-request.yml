# Nonprofit Social Networking Platform: Allowing Users and Organizations to Collaborate.
# Copyright (C) 2023  ASCENDynamics NFP

# This file is part of Nonprofit Social Networking Platform.

# Nonprofit Social Networking Platform is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Nonprofit Social Networking Platform is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with Nonprofit Social Networking Platform.  If not, see <https://www.gnu.org/licenses/>.
name: CI and PR Deployment

on:
  pull_request:
    branches:
      - main  # Trigger workflow on pull requests targeting the main branch

jobs:
  # Linting job
  lint:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run linting
      - name: Run lint
        run: npm run lint

  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    # needs: lint  # This job depends on the successful completion of the lint job

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Cache node modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm                    # NPM cache directory
            node_modules              # Root node_modules
            functions/node_modules    # Functions node_modules
          key: ${{ runner.os }}-node-20-${{ hashFiles('package-lock.json', 'functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          npm ci                            # Install root project dependencies
          npm --prefix functions ci         # Install functions dependencies

      # Step 5: Set environment variables
      - name: Set environment variables
        run: |
          echo "CI=true" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "FIREBASE_API_KEY=${{ secrets.DEV_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.DEV_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "FIREBASE_PROJECT_ID=${{ secrets.DEV_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.DEV_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.DEV_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=${{ secrets.DEV_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_MEASUREMENT_ID=${{ secrets.DEV_FIREBASE_MEASUREMENT_ID }}" >> $GITHUB_ENV

      # Step 6: Generate environment file
      - name: Generate environment file
        run: node generate-env.js

      # Step 7: Build the project (Development)
      - name: Build Project
        run: npm run build

      # Step 8: Run tests
      - name: Run tests
        run: npm run test

      # Step 9: Upload Build Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: www
          path: www/  # Adjust to include all files in the build directory

  # Deploy to Firebase Preview
  build_and_preview:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}  # Only run for PRs from the same repo
    runs-on: ubuntu-latest
    needs: build-and-test  # This job depends on the successful completion of the build-and-test job

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Download Build Artifact
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: www
          path: www/

      # Step 3: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Specify Node.js version

      # Step 4: Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools  # Install Firebase CLI globally

      # Step 5: Install Dependencies for addAuthorizedDomain.js
      - name: Install Dependencies for addAuthorizedDomain.js
        run: npm install googleapis  # Install googleapis package

      # Step 6: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ASCENDCOOPPLATFORM_DEV }}'  # Service account JSON
        env:
          CLOUDSDK_CORE_PROJECT: ${{ secrets.DEV_FIREBASE_PROJECT_ID }}  # Set the project ID for Google Cloud SDK

      # Step 7: Deploy to Firebase Preview and Capture Output
      - name: Deploy to Firebase Preview
        id: firebase_deploy  # Assign an ID to reference outputs later
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          OUTPUT=$(firebase hosting:channel:deploy pr-${{ github.event.number }} --project ${{ secrets.DEV_FIREBASE_PROJECT_ID }} --expires 10d)
          echo "$OUTPUT"

          # Extract the Channel URL from the deployment output
          PREVIEW_URL=$(echo "$OUTPUT" | grep 'Channel URL' | awk '{print $4}')
          
          if [ -z "$PREVIEW_URL" ]; then
            echo "❌ Failed to extract the preview URL."
            exit 1
          fi

          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV  # Export PREVIEW_URL for subsequent steps

      # Step 8: Set Preview Domain
      - name: Set Preview Domain
        run: |
          # Remove 'https://' prefix and any trailing slash
          DOMAIN=${PREVIEW_URL#https://}
          DOMAIN=${DOMAIN%/}
          echo "PREVIEW_DOMAIN=${DOMAIN}" >> $GITHUB_ENV

      # Step 9: Add Preview Domain to Authorized Domains
      - name: Add Preview Domain to Authorized Domains
        run: node addAuthorizedDomain.js ${{ env.PREVIEW_DOMAIN }}  # Pass the domain as an argument
        env:
          FIREBASE_ADMIN_SDK_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ASCENDCOOPPLATFORM_DEV }}  # Provide service account JSON

      # Step 10: Output the Preview URL
      - name: Output Preview URL
        run: |
          echo "✅ Preview URL is: ${{ env.PREVIEW_URL }}"  # Display the preview URL
