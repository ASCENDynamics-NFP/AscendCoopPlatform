# Nonprofit Social Networking Platform: Allowing Users and Organizations to Collaborate.
# Copyright (C) 2023  ASCENDynamics NFP

# This file is part of Nonprofit Social Networking Platform.

# Nonprofit Social Networking Platform is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Nonprofit Social Networking Platform is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with Nonprofit Social Networking Platform.  If not, see <https://www.gnu.org/licenses/>.
name: CI and PR Deployment

on:
  pull_request:
    branches:
      - main  # Trigger workflow on pull requests targeting the main branch

jobs:
  # Linting job
  lint:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run linting
      - name: Run lint
        run: npm run lint

  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    # needs: lint  # This job depends on the successful completion of the lint job

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Cache node modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm                    # NPM cache directory
            node_modules              # Root node_modules
            functions/node_modules    # Functions node_modules
          key: ${{ runner.os }}-node-20-${{ hashFiles('package-lock.json', 'functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          npm ci                            # Install root project dependencies
          npm --prefix functions ci         # Install functions dependencies

      # Step 5: Set environment variables
      - name: Set environment variables
        run: |
          echo "CI=true" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "FIREBASE_API_KEY=${{ secrets.DEV_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.DEV_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "FIREBASE_PROJECT_ID=${{ secrets.DEV_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.DEV_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.DEV_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=${{ secrets.DEV_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_MEASUREMENT_ID=${{ secrets.DEV_FIREBASE_MEASUREMENT_ID }}" >> $GITHUB_ENV

      # Step 6: Generate environment file
      - name: Generate environment file
        run: node generate-env.js

      # Step 7: Build the project (Development)
      - name: Build Project
        run: npm run build

      # Step 8: Run tests
      - name: Run tests
        run: npm run test

      # Step 9: Upload Build Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: www
          path: www/  # Adjust to include all files in the build directory

  # Deploy to Firebase Preview
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Set environment variables
      - name: Set environment variables
        run: |
          echo "CI=true" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "FIREBASE_API_KEY=${{ secrets.DEV_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.DEV_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "FIREBASE_PROJECT_ID=${{ secrets.DEV_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.DEV_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.DEV_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=${{ secrets.DEV_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_MEASUREMENT_ID=${{ secrets.DEV_FIREBASE_MEASUREMENT_ID }}" >> $GITHUB_ENV

      # 6. Build the project
      - name: Build project
        run: npm run build

      # 6. Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GOOGLE_APPLICATION_CREDENTIALS }}

      # 7. Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # 8. Verify Firebase CLI Installation
      - name: Verify Firebase CLI
        run: firebase --version

      # 9. Deploy to Firebase Preview
      - name: Deploy to Firebase Preview
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANNEL="pr-${{ github.event.number }}"
          else
            CHANNEL="main-preview"
          fi
          echo "Deploying to Firebase channel: $CHANNEL"
          firebase hosting:channel:deploy $CHANNEL --project ${{ secrets.DEV_FIREBASE_PROJECT_ID }}

      # 10. Install Dependencies for Domain Authorization
      - name: Install Dependencies for Domain Authorization
        run: |
          npm install firebase-admin googleapis

      # 11. Add Authorized Domain to Firebase Auth
      - name: Add Authorized Domain to Firebase Auth
        run: |
          node .github/scripts/addAuthorizedDomain.js
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.DEV_GOOGLE_APPLICATION_CREDENTIALS }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          PREVIEW_DOMAIN: ${{ env.PREVIEW_DOMAIN }}
