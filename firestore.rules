rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for Account
    match /accounts/{accountId} {
      function isUser() {
        return request.auth.uid == userId;
      }

      function isFriend() {
        return request.auth.uid in resource.data.friends;
      }

      allow read: if (isUser() // User can always read their own data
      								|| (resource.data.privacySetting == 'public')
      								|| (resource.data.privacySetting == 'friends-only' && isFriend()));
                  
      allow write: if isUser(); // Only the user can write to their own data
    }

    // Rules for relatedAccount
    match /accounts/{accountId}/relatedAccounts/{relatedAccountId} {
      allow create, read, write, delete: if request.auth.uid != null; // Only the user can write to their own data
    }
    // Rules for AppFeedback
    match /feedback/{userId} {
      function isUser() {
        return request.auth.uid == userId;
      }

      allow create: if isUser();
      allow read, write: if request.auth.uid != null; // Only the user can write to their own data
      allow delete: if false;
    }
    
    match /accounts/{accountId} {
    	allow create, delete, read, write: if true;
		}
    
    // Rules for AppGroup
    match /groups/{groupId} {
      function isMember() {
        return request.auth.uid in resource.data.members;
      }

      function isAdmin() {
        return request.auth.uid in resource.data.admins;
      }

      function isPendingMember() {
        return request.auth.uid in resource.data.pendingMembers;
      }

      allow read: if true;//isMember() || isPendingMember() || request.auth.uid != null;
      allow write: if isAdmin();
      allow create: if request.auth.uid != null; // Any authenticated user can create a group

    }
    
    // Rules for AppRelationship
    match /relationships/{relationshipId} {
      function isSender() {
        return request.auth.uid == resource.data.senderId;
      }

      function isReceiver() {
        return request.auth.uid == resource.data.receiverId;
      }

      function isRelatedUser() {
        return request.auth.uid in resource.data.relatedIds;
      }

      allow read: if true; //isSender() || isReceiver() || isRelatedUser();
      allow create: if request.auth.uid != null;
      allow update: if isSender() || isReceiver();
      allow delete: if isSender() || isReceiver();
    }
    
    // Rules for AppUser
    match /users/{userId} {
      function isUser() {
        return request.auth.uid == userId;
      }

      function isFriend() {
        return request.auth.uid in resource.data.friends;
      }

      allow read: if (isUser() // User can always read their own data
      								|| (resource.data.privacySetting == 'public')
      								|| (resource.data.privacySetting == 'friends-only' && isFriend()));
                  
      allow write: if isUser(); // Only the user can write to their own data
    }
  }
}
