rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /listings {
      allow list: if true;  // Allow listing collection queries, essential for features like filtering and pagination.
    }

    // Listings collection rules
    match /listings/{listingId} {
      allow read: if true; // Anyone can view listings
      allow create: if request.auth != null; // Must be logged in to create
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy; // Only creator can modify
    }

    // Allow authenticated users to apply for listings
    match /listings/{listingId}/relatedAccounts/{relatedAccountId} {
      allow create, read, write, delete: if request.auth.uid != null; // Only authenticated users
    }

    // Helper to check if user is an admin of the given account
    function isAccountAdmin(accId) {
      return request.auth != null && (
        request.auth.uid == accId ||
        (
          exists(/databases/$(database)/documents/accounts/$(accId)/relatedAccounts/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/accounts/$(accId)/relatedAccounts/$(request.auth.uid)).data.status == 'accepted' &&
          (
            get(/databases/$(database)/documents/accounts/$(accId)/relatedAccounts/$(request.auth.uid)).data.access == 'admin' ||
            get(/databases/$(database)/documents/accounts/$(accId)/relatedAccounts/$(request.auth.uid)).data.access == 'moderator'
          )
        )
      );
    }

    // Projects collection rules
    match /projects {
      allow list: if request.auth != null;
    }

    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if isAccountAdmin(request.resource.data.accountId);
      allow update, delete: if isAccountAdmin(resource.data.accountId);
    }

    match /accounts {
      allow list: if isPublicUser() || isPublicGroup();

      // Public Group access
      function isPublicGroup() {
        return (resource.data.privacy == 'public' && resource.data.type == 'group');
      }

      // Public User access
      function isPublicUser() {
        return (request.auth != null && resource.data.privacy == 'public' && resource.data.type == 'user');
      }
    }

    // Match the Account collection
    match /accounts/{accountId} {
      
      function isAccountOwner() {
        return request.auth != null && request.auth.uid == accountId;
      }

      function isGroupAdmin() {
        return request.auth != null &&
          exists(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.status == 'accepted' &&
          (get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.access == 'admin' ||
           get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.access == 'moderator');
      }

      // Friends-only access
      function isAcceptedFriend() {
        return (request.auth != null && exists(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid))
          && get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.type == 'user'
          && get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.status == 'accepted');
      }

      // Groups-only access
      function isAcceptedGroup() {
        return (request.auth != null && exists(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid))
          && get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.type == 'group'
          && get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.status == 'accepted');
      }

      // Public Group access
      function isPublicGroup() {
        return (resource.data.privacy == 'public' && resource.data.type == 'group');
      }

      // Public User access
      function isPublicUser() {
        return (request.auth != null && resource.data.privacy == 'public' && resource.data.type == 'user');
      }

      // Allow read if the user is accessing their own account
      allow read: if (isAccountOwner() || isAcceptedFriend() || isAcceptedGroup() || isPublicGroup() || isPublicUser());

      // General write rule allows owners or group admins/moderators
      allow create, write: if isAccountOwner() || isGroupAdmin();
    }

    // Rules for relatedAccount
    match /accounts/{accountId}/relatedAccounts/{relatedAccountId} {
      function isAccountOwner() {
        return request.auth != null && request.auth.uid == accountId;
      }

      function isGroupAdmin() {
        return request.auth != null &&
          exists(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.status == 'accepted' &&
          (get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.access == 'admin' ||
           get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.access == 'moderator');
      }

      function isRelatedToAccount() {
        return request.auth != null &&
          (request.auth.uid == accountId || request.auth.uid == relatedAccountId);
      }

      allow read: if request.auth.uid != null;
      allow create, write, delete: if isAccountOwner() || isGroupAdmin() || isRelatedToAccount();
    }

    match /accounts/{accountId}/relatedListings/{listingId} {
      allow create, read, write, delete: if request.auth.uid != null;  // Only authenticated users
    }

    // Time entries within group accounts
    match /accounts/{accountId}/timeEntries/{entryId} {
      function isGroupAccount() {
        return get(/databases/$(database)/documents/accounts/$(accountId)).data.type == 'group';
      }

      function isGroupMember() {
        return request.auth != null &&
          exists(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.status == 'accepted';
      }

      function isGroupAdmin() {
        return request.auth != null &&
          exists(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/accounts/$(accountId)/relatedAccounts/$(request.auth.uid)).data.access == 'admin';
      }

      allow read: if isGroupAccount() && isGroupMember();
      allow create: if isGroupAccount() && request.auth.uid == request.resource.data.userId && isGroupMember();
      allow update: if isGroupAccount() && request.auth.uid == request.resource.data.userId && isGroupMember() &&
        (request.resource.data.status == 'approved' ? isGroupAdmin() : true);
      allow delete: if false;
    }
    
    // Rules for AppFeedback
    match /feedback/{accountId} {
      function isAccountOwner() {
        return request.auth.uid == accountId;
      }

      allow create: if isAccountOwner();
      allow read, write: if request.auth.uid != null; // Only logged in users can read and write feedback
      allow delete: if false;
    }
  }
}
